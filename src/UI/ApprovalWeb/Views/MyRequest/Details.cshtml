@model ApprovalRequestViewModel
@using System.Security.Claims
@using System.Text.Json

@{
    // JSON Serializer options to ensure property names are not changed
    var options = new JsonSerializerOptions
    {
        PropertyNamingPolicy = null
    };

    // Serialize the steps data for use in JavaScript
    var stepsData = JsonSerializer.Serialize(Model.Steps ?? new List<ApprovalStepViewModel>(), options);
}

<!-- Include necessary JavaScript libraries -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/js/utility.js"></script>
<script>
    $(document).ready(function () {
        const $input = $("#userSearchInput");
        const $results = $("#autocompleteResults");

        // Load existing steps into a JavaScript variable
        const stepsData = @Html.Raw(stepsData);

        // Placeholder for displaying steps (functionality not implemented)
        // displaySteps(stepsData);
    });
</script>

<!-- Approval Details Card -->
<div class="card shadow-sm">
    <div class="card-header bg-primary text-white">
        <h2 class="mb-0">Approval Details</h2>
    </div>
    <div class="card-body">
        <div class="section-box">
            <!-- Approval Steps Section -->
            <div class="mb-4">
                <h4>Approval Steps</h4>
                @await Html.PartialAsync("_ApprovalSteps", @Model)
            </div>
        </div>

        <!-- Approval Details Table -->
        <table class="table table-bordered table-striped">
            <tbody>
                <tr>
                    <th style="width:200px">Title</th>
                    <td>@Model.RequestTitle</td>
                </tr>
                <tr>
                    <th>Applicant</th>
                    <td>@Model.ApplicantName</td>
                </tr>
                <tr>
                    <th>Department</th>
                    <td>@Model.ApplicantDepartment</td>
                </tr>
                <tr>
                    <th>Status</th>
                    <td>
                        <span class="badge @(Model.Status switch {
                            "Approved" => "bg-success",
                            "Rejected" => "bg-danger",
                            _ => "bg-warning text-dark"
                        })">
                            @Model.Status
                        </span>
                    </td>
                </tr>
                <tr>
                    <th>Requested At</th>
                    <td>@Model.RequestedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                </tr>
                <tr>
                    <th>Responded At</th>
                    <td>@(Model.RespondedAt?.ToLocalTime().ToString("yyyy-MM-dd HH:mm") ?? "—")</td>
                </tr>
                <tr>
                    <th>Content</th>
                    <td>
                        <textarea readonly style="width: 100%; height: 400px; border: 1px solid #ddd; border-radius: 5px; padding: 10px; background-color: #f9f9f9;">@(Model.RequestContent ?? "—")
                        </textarea>
                    </td>
                </tr>
            </tbody>
        </table>

        <div class="section-box">

            <!-- Attached Files Section -->
            <div class="mb-4">
                <h4>Attached Files</h4>
                @await Html.PartialAsync("_AttachedFiles", @Model)
            </div>
        </div>

    </div>

    <!-- Actions Section -->
    <div class="card-footer">
        <h5>Actions</h5>
        @if (Model.Status == "Pending" && Model.ApplicantEmployeeNumber != @User.FindFirst(ClaimTypes.NameIdentifier)?.Value)
        {
            <!-- Approve and Reject buttons -->
            <form asp-action="Approve" method="post" class="d-inline">
                <input type="hidden" name="ApprovalId" value="@Model.ApprovalId" />
                <button type="submit" class="btn btn-success">Approve</button>
            </form>
            <form asp-action="Reject" method="post" class="d-inline ms-2">
                <input type="hidden" name="ApprovalId" value="@Model.ApprovalId" />
                <button type="submit" class="btn btn-danger">Reject</button>
            </form>
        }
        else
        {
            <p class="text-muted">No actions available for this request.</p>
        }
    </div>
</div>

<!-- Custom Styles -->
<style>
    .section-box {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 20px;
        background-color: #f9f9f9;
    }

    #autocompleteResults {
        top: 40px;
        max-height: 250px;
        overflow-y: auto;
        border: 1px solid #ddd;
        background-color: #fff;
        position: absolute;
        width: 100%;
    }

    #autocompleteResults .list-group-item {
        cursor: pointer;
    }

    #autocompleteResults .list-group-item:hover {
        background-color: #f0f0f0;
    }
</style>
